<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2010-03-24 21:11:41                           *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoTestUser extends IdentifiableObject
	{
		protected $credentials = null;
		protected $lastLogin = null;
		protected $registered = null;
		protected $strangeTime = null;
		protected $city = null;
		protected $firstOptional = null;
		protected $secondOptional = null;
		protected $parts = null;
		protected $encapsulants = null;
		protected $url = null;
		protected $properties = null;
		protected $ip = null;
		
		public function __construct()
		{
			$this->credentials = new Credentials();
		}
		
		public function __sleep()
		{
			return array('id', 'credentials', 'lastLogin', 'registered', 'strangeTime', 'city', 'firstOptional', 'secondOptional', 'url', 'properties', 'ip');
		}
		
		/**
		 * @return Credentials
		**/
		public function getCredentials()
		{
			return $this->credentials;
		}
		
		/**
		 * @return TestUser
		**/
		public function setCredentials(Credentials $credentials)
		{
			$this->credentials = $credentials;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropCredentials()
		{
			$this->credentials = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getLastLogin()
		{
			return $this->lastLogin;
		}
		
		/**
		 * @return TestUser
		**/
		public function setLastLogin(Timestamp $lastLogin)
		{
			$this->lastLogin = $lastLogin;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropLastLogin()
		{
			$this->lastLogin = null;
			
			return $this;
		}
		
		/**
		 * @return Timestamp
		**/
		public function getRegistered()
		{
			return $this->registered;
		}
		
		/**
		 * @return TestUser
		**/
		public function setRegistered(Timestamp $registered)
		{
			$this->registered = $registered;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropRegistered()
		{
			$this->registered = null;
			
			return $this;
		}
		
		/**
		 * @return Time
		**/
		public function getStrangeTime()
		{
			return $this->strangeTime;
		}
		
		/**
		 * @return TestUser
		**/
		public function setStrangeTime(Time $strangeTime)
		{
			$this->strangeTime = $strangeTime;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropStrangeTime()
		{
			$this->strangeTime = null;
			
			return $this;
		}
		
		/**
		 * @return TestCity
		**/
		public function getCity()
		{
			return $this->city;
		}
		
		/**
		 * @return TestUser
		**/
		public function setCity(TestCity $city)
		{
			$this->city = $city;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropCity()
		{
			$this->city = null;
			
			return $this;
		}
		
		/**
		 * @return TestCity
		**/
		public function getFirstOptional()
		{
			return $this->firstOptional;
		}
		
		/**
		 * @return TestUser
		**/
		public function setFirstOptional(TestCity $firstOptional)
		{
			$this->firstOptional = $firstOptional;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropFirstOptional()
		{
			$this->firstOptional = null;
			
			return $this;
		}
		
		/**
		 * @return TestCity
		**/
		public function getSecondOptional()
		{
			return $this->secondOptional;
		}
		
		/**
		 * @return TestUser
		**/
		public function setSecondOptional(TestCity $secondOptional)
		{
			$this->secondOptional = $secondOptional;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropSecondOptional()
		{
			$this->secondOptional = null;
			
			return $this;
		}
		
		/**
		 * @return TestUserPartsDAO
		**/
		public function getParts($lazy = false)
		{
			if (!$this->parts || ($this->parts->isLazy() != $lazy)) {
				$this->parts = new TestUserPartsDAO($this, $lazy);
			}
			
			return $this->parts;
		}
		
		/**
		 * @return TestUser
		**/
		public function fillParts($collection, $lazy = false)
		{
			$this->parts = new TestUserPartsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->parts->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return TestUserEncapsulantsDAO
		**/
		public function getEncapsulants($lazy = false)
		{
			if (!$this->encapsulants || ($this->encapsulants->isLazy() != $lazy)) {
				$this->encapsulants = new TestUserEncapsulantsDAO($this, $lazy);
			}
			
			return $this->encapsulants;
		}
		
		/**
		 * @return TestUser
		**/
		public function fillEncapsulants($collection, $lazy = false)
		{
			$this->encapsulants = new TestUserEncapsulantsDAO($this, $lazy);
			
			if (!$this->id) {
				throw new WrongStateException(
					'i do not know which object i belong to'
				);
			}
			
			$this->encapsulants->mergeList($collection);
			
			return $this;
		}
		
		/**
		 * @return HttpUrl
		**/
		public function getUrl()
		{
			return $this->url;
		}
		
		/**
		 * @return TestUser
		**/
		public function setUrl(HttpUrl $url)
		{
			$this->url = $url;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropUrl()
		{
			$this->url = null;
			
			return $this;
		}
		
		/**
		 * @return Hstore
		**/
		public function getProperties()
		{
			return $this->properties;
		}
		
		/**
		 * @return TestUser
		**/
		public function setProperties(Hstore $properties)
		{
			$this->properties = $properties;
			
			return $this;
		}
		
		/**
		 * @return TestUser
		**/
		public function dropProperties()
		{
			$this->properties = null;
			
			return $this;
		}
		
		public function getIp()
		{
			return $this->ip;
		}
		
		/**
		 * @return TestUser
		**/
		public function setIp($ip)
		{
			$this->ip = $ip;
			
			return $this;
		}
	}
?>