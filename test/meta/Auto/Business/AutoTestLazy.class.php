<?php
/*****************************************************************************
 *   Copyright (C) 2006-2009, onPHP's MetaConfiguration Builder.             *
 *   Generated by onPHP-1.1 at 2011-02-09 18:30:05                           *
 *   This file is autogenerated - do not edit.                               *
 *****************************************************************************/

	abstract class AutoTestLazy extends IdentifiableObject
	{
		protected $city = null;
		protected $cityId = null;
		protected $cityOptional = null;
		protected $cityOptionalId = null;
		protected $enum = null;
		protected $enumId = null;
		
		public function __sleep()
		{
			return array('id', 'cityId', 'cityOptionalId', 'enumId');
		}
		
		/**
		 * @return TestCity
		**/
		public function getCity()
		{
			if (!$this->city && $this->cityId) {
				$this->city = TestCity::dao()->getById($this->cityId);
			}
			
			return $this->city;
		}
		
		public function getCityId()
		{
			return $this->cityId;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setCity(TestCity $city)
		{
			$this->city = $city;
			$this->cityId = $city->getId();
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setCityId($id)
		{
			$this->city = null;
			$this->cityId = $id;
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function dropCity()
		{
			$this->city = null;
			$this->cityId = null;
			
			return $this;
		}
		
		/**
		 * @return TestCity
		**/
		public function getCityOptional()
		{
			if (!$this->cityOptional && $this->cityOptionalId) {
				$this->cityOptional = TestCity::dao()->getById($this->cityOptionalId);
			}
			
			return $this->cityOptional;
		}
		
		public function getCityOptionalId()
		{
			return $this->cityOptionalId;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setCityOptional(TestCity $cityOptional)
		{
			$this->cityOptional = $cityOptional;
			$this->cityOptionalId = $cityOptional->getId();
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setCityOptionalId($id)
		{
			$this->cityOptional = null;
			$this->cityOptionalId = $id;
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function dropCityOptional()
		{
			$this->cityOptional = null;
			$this->cityOptionalId = null;
			
			return $this;
		}
		
		/**
		 * @return ImageType
		**/
		public function getEnum()
		{
			if (!$this->enum && $this->enumId) {
				$this->enum = new ImageType($this->enumId);
			}
			
			return $this->enum;
		}
		
		public function getEnumId()
		{
			return $this->enumId;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setEnum(ImageType $enum)
		{
			$this->enum = $enum;
			$this->enumId = $enum->getId();
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function setEnumId($id)
		{
			$this->enum = null;
			$this->enumId = $id;
			
			return $this;
		}
		
		/**
		 * @return TestLazy
		**/
		public function dropEnum()
		{
			$this->enum = null;
			$this->enumId = null;
			
			return $this;
		}
	}
?>